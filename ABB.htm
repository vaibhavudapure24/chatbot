<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ABB Chatbot</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }
        
        .chat-history::-webkit-scrollbar {
            width: 8px;
        }
        
        .chat-history::-webkit-scrollbar-track {
            background: #e5e7eb;
            border-radius: 10px;
        }
        
        .chat-history::-webkit-scrollbar-thumb {
            background-color: #d1d5db;
            border-radius: 10px;
        }
        
        .chat-history::-webkit-scrollbar-thumb:hover {
            background-color: #9ca3af;
        }
        
        .user-message {
            background-color: #3b82f6;
            color: white;
            align-self: flex-end;
            border-top-left-radius: 1.5rem;
            border-bottom-left-radius: 1.5rem;
            border-bottom-right-radius: 1.5rem;
            line-height: 1.5;
        }
        
        .bot-message {
            background-color: #e5e7eb;
            color: #1f2937;
            align-self: flex-start;
            border-top-right-radius: 1.5rem;
            border-bottom-left-radius: 1.5rem;
            border-bottom-right-radius: 1.5rem;
            line-height: 1.5;
        }
        
        .typing-indicator {
            background-color: #d1d5db;
            color: #4b5563;
        }
        
        .file-upload-info {
            background-color: #dcfce7;
            color: #065f46;
            padding: 0.5rem 1rem;
            border-radius: 0.75rem;
            text-align: center;
            font-size: 0.875rem;
            font-weight: 500;
            margin-top: 1rem;
        }
    </style>
</head>

<body class="bg-gray-100 flex items-center justify-center p-4">
    <div class="w-full max-w-xl mx-auto flex flex-col h-[85vh] md:h-[80vh] bg-white rounded-3xl shadow-2xl overflow-hidden">
        <div class="bg-indigo-600 text-white p-5 font-bold text-lg md:text-xl rounded-t-3xl shadow-md flex flex-col space-y-1 px-6">
            <div class="text-sm opacity-70 font-normal">Created by Vaibhav</div>
            <div class="flex items-center space-x-3">
                <span class="text-3xl leading-none">üë©‚Äçüíª</span>
                <div>
                    <div class="text-xs opacity-80 leading-tight">AI Data Analyst</div>
                    <div class="text-lg leading-tight">Conversation Mode</div>
                </div>
            </div>
        </div>

        <div id="chatHistory" class="chat-history flex-grow p-6 space-y-4 overflow-y-auto">
            <div class="bot-message p-3 rounded-3xl max-w-[80%] shadow-sm">
                Hello! I am ready to answer general questions or analyze your uploaded data.
                <br><br><strong>To query your data, mention the file name (e.g., "What is the CO2 emission in the sustainability file?").</strong>
                <br><br><em>(‡§Æ‡•Ä ‡§π‡§ø‡§Ç‡§¶‡•Ä/‡§Æ‡§∞‡§æ‡§†‡•Ä‡§§ ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§ä ‡§∂‡§ï‡§§‡•ã.)</em>
            </div>
            <div id="fileInfoContainer" class="file-upload-info hidden"></div>
        </div>

        <div class="p-2 bg-white flex justify-center border-t border-gray-200">
            <input type="file" id="fileUploader" accept=".csv, .txt" class="hidden" multiple>
            <button id="attachFileBtn" class="px-4 py-2 text-sm font-semibold text-indigo-700 bg-indigo-100 rounded-full hover:bg-indigo-200 transition-colors duration-200 flex items-center shadow-md">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd"
            d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z"
            clip-rule="evenodd" />
        </svg>
        Attach File (CSV/TXT)
      </button>
        </div>

        <div class="p-4 bg-gray-50 flex items-center border-t border-gray-200">
            <input type="text" id="userInput" placeholder="Ask a general question or query a file..." class="flex-grow p-3 rounded-full bg-white border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors duration-200" autocomplete="off">
            <button id="sendBtn" class="ml-3 p-3 bg-indigo-600 text-white rounded-full shadow-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-transform duration-200 hover:scale-110 disabled:opacity-50 disabled:cursor-not-allowed">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 rotate-90" fill="none" viewBox="0 0 24 24"
          stroke="currentColor" stroke-width="2">
          <path stroke-linecap="round" stroke-linejoin="round" d="M5 10l7-7m0 0l7 7m-7-7v18" />
        </svg>
      </button>
        </div>
    </div>

    <script>
        // Gemini API (exposed here only for demo ‚Äî move to a backend in production)
        const apiKey = "AIzaSyA2lRRo3U1qEHvNG-t30FJrCdMEqG6a_O4";
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

        const chatHistory = document.getElementById('chatHistory');
        const userInput = document.getElementById('userInput');
        const sendBtn = document.getElementById('sendBtn');
        const fileUploader = document.getElementById('fileUploader');
        const attachFileBtn = document.getElementById('attachFileBtn');
        const fileInfoContainer = document.getElementById('fileInfoContainer');

        function addMessage(text, sender, isLoading = false, messageId = null) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('p-3', 'rounded-3xl', 'max-w-[80%]', 'shadow-md', 'transition-transform', 'duration-300');
            if (sender === 'user') {
                messageDiv.textContent = text;
                messageDiv.classList.add('user-message');
            } else {
                if (isLoading) {
                    messageDiv.innerHTML = `<span>‡§Æ‡•Ä ‡§è‡§ï ‡§è‡§Ü‡§Ø (AI) ‡§Ü‡§π‡•á ‚Ä¶</span>`;
                    messageDiv.classList.add('typing-indicator');
                    if (messageId) messageDiv.id = messageId;
                } else {
                    messageDiv.innerHTML = text;
                }
                messageDiv.classList.add('bot-message');
            }
            chatHistory.appendChild(messageDiv);
            chatHistory.scrollTop = chatHistory.scrollHeight;
            return messageDiv.id;
        }

        async function getGeminiResponse(userQuery) {
            const payload = {
                contents: [{
                    parts: [{
                        text: userQuery
                    }]
                }]
            };

            try {
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(`API error: ${response.status} ${response.statusText} - ${errorData.error.message}`);
                }

                const result = await response.json();
                const text = result ? .candidates ? .[0] ? .content ? .parts ? .[0] ? .text || "Sorry, I couldn't generate a response.";
                return text;
            } catch (err) {
                console.error('Gemini API Error:', err);
                return `An error occurred: ${err.message}. Please check your API key and network connection.`;
            }
        }

        async function sendMessage() {
            const message = userInput.value.trim();
            if (!message) return;
            addMessage(message, 'user');
            userInput.value = '';

            const loadingMessageId = 'loading-' + Date.now();
            addMessage("", 'bot', true, loadingMessageId);
            const loadingDiv = document.getElementById(loadingMessageId);

            try {
                userInput.disabled = true;
                sendBtn.disabled = true;
                const aiResponse = await getGeminiResponse(message);
                if (loadingDiv) {
                    loadingDiv.innerHTML = aiResponse;
                    loadingDiv.classList.remove('typing-indicator');
                }
            } catch (e) {
                console.error(e);
                if (loadingDiv) {
                    loadingDiv.innerHTML = "An error occurred while fetching the response.";
                    loadingDiv.classList.remove('typing-indicator');
                }
            } finally {
                userInput.disabled = false;
                sendBtn.disabled = false;
                chatHistory.scrollTop = chatHistory.scrollHeight;
            }
        }

        attachFileBtn.addEventListener('click', () => fileUploader.click());

        // Show file names when chosen
        fileUploader.addEventListener('change', () => {
            if (fileUploader.files.length) {
                fileInfoContainer.classList.remove('hidden');
                fileInfoContainer.textContent = Array.from(fileUploader.files).map(f => f.name).join(', ');
            } else {
                fileInfoContainer.classList.add('hidden');
            }
        });

        sendBtn.addEventListener('click', sendMessage);
        userInput.addEventListener('keypress', e => {
            if (e.key === 'Enter' && !userInput.disabled) sendMessage();
        });
    </script>
</body>

</html>